_wandb:
    value:
        cli_version: 0.18.5
        m:
            - "1": test/cm_table.sha256
              "5": 2
              "6":
                - 1
                - 3
              "7": []
            - "1": trainer/global_step
              "6":
                - 3
              "7": []
            - "1": test/miou
              "5": 2
              "6":
                - 1
                - 3
              "7": []
            - "1": train/loss
              "5": 2
              "6":
                - 1
                - 3
              "7": []
            - "1": train/iou_Window + Door
              "5": 2
              "6":
                - 1
                - 3
              "7": []
            - "1": test/cm_table.size
              "5": 2
              "6":
                - 1
                - 3
              "7": []
            - "1": test/macc
              "5": 2
              "6":
                - 1
                - 3
              "7": []
            - "1": train/iou_Others
              "5": 2
              "6":
                - 1
                - 3
              "7": []
            - "1": val/iou_Others
              "5": 2
              "6":
                - 1
                - 3
              "7": []
            - "1": val/macc_best
              "5": 2
              "6":
                - 1
                - 3
              "7": []
            - "1": test/cm_table.path
              "5": 2
              "6":
                - 1
                - 3
              "7": []
            - "1": test/iou_Window + Door
              "5": 2
              "6":
                - 1
                - 3
              "7": []
            - "1": lr-AdamW/pg1-momentum
              "5": 2
              "6":
                - 1
                - 3
              "7": []
            - "1": lr-AdamW/pg2-momentum
              "5": 2
              "6":
                - 1
                - 3
              "7": []
            - "1": val/oa
              "5": 2
              "6":
                - 1
                - 3
              "7": []
            - "1": test/cm_table._latest_artifact_path
              "5": 2
              "6":
                - 1
                - 3
              "7": []
            - "1": test/cm_table.ncols
              "5": 2
              "6":
                - 1
                - 3
              "7": []
            - "1": test/iou_Wall
              "5": 2
              "6":
                - 1
                - 3
              "7": []
            - "1": lr-AdamW/pg1
              "5": 2
              "6":
                - 1
                - 3
              "7": []
            - "1": epoch
              "5": 2
              "6":
                - 1
                - 3
              "7": []
            - "1": train/iou_Wall
              "5": 2
              "6":
                - 1
                - 3
              "7": []
            - "1": train/oa
              "5": 2
              "6":
                - 1
                - 3
              "7": []
            - "1": test/iou_Others
              "5": 2
              "6":
                - 1
                - 3
              "7": []
            - "1": test/oa
              "5": 2
              "6":
                - 1
                - 3
              "7": []
            - "1": val/macc
              "5": 2
              "6":
                - 1
                - 3
              "7": []
            - "1": test/cm_table.artifact_path
              "5": 2
              "6":
                - 1
                - 3
              "7": []
            - "1": train/miou
              "5": 2
              "6":
                - 1
                - 3
              "7": []
            - "1": test/loss
              "5": 2
              "6":
                - 1
                - 3
              "7": []
            - "1": train/macc
              "5": 2
              "6":
                - 1
                - 3
              "7": []
            - "1": val/loss
              "5": 2
              "6":
                - 1
                - 3
              "7": []
            - "1": val/iou_Wall
              "5": 2
              "6":
                - 1
                - 3
              "7": []
            - "1": val/iou_Window + Door
              "5": 2
              "6":
                - 1
                - 3
              "7": []
            - "1": val/miou_best
              "5": 2
              "6":
                - 1
                - 3
              "7": []
            - "1": val/oa_best
              "5": 2
              "6":
                - 1
                - 3
              "7": []
            - "1": test/cm_table.nrows
              "5": 2
              "6":
                - 1
                - 3
              "7": []
            - "1": lr-AdamW/pg2
              "5": 2
              "6":
                - 1
                - 3
              "7": []
            - "1": val/miou
              "5": 2
              "6":
                - 1
                - 3
              "7": []
            - "1": test/cm_table._type
              "5": 2
              "6":
                - 1
                - 3
              "7": []
        python_version: 3.8.20
        t:
            "1":
                - 1
                - 5
                - 9
                - 41
                - 50
                - 53
                - 55
                - 77
                - 103
            "2":
                - 1
                - 5
                - 9
                - 41
                - 50
                - 53
                - 55
                - 77
                - 103
            "3":
                - 2
                - 7
                - 13
                - 23
                - 55
                - 66
            "4": 3.8.20
            "5": 0.18.5
            "8":
                - 5
            "12": 0.18.5
            "13": linux-x86_64
        visualize:
            test/cm:
                panel_config:
                    fieldSettings:
                        Actual: Actual
                        Predicted: Predicted
                        nPredictions: nPredictions
                    panelDefId: wandb/confusion_matrix/v1
                    stringSettings:
                        title: ""
                    transform:
                        name: tableWithLeafColNames
                    userQuery:
                        queryFields:
                            - args:
                                - name: runSets
                                  value: ${runSets}
                              fields:
                                - fields: []
                                  name: id
                                - fields: []
                                  name: name
                                - fields: []
                                  name: _defaultColorIndex
                                - args:
                                    - name: tableKey
                                      value: test/cm_table
                                  fields: []
                                  name: summaryTable
                              name: runSets
                panel_type: Vega2
callbacks:
    value: '{''model_checkpoint'': {''_target_'': ''pytorch_lightning.callbacks.ModelCheckpoint'', ''dirpath'': ''${paths.output_dir}/checkpoints'', ''filename'': ''epoch_{epoch:03d}'', ''monitor'': ''${optimized_metric}'', ''verbose'': False, ''save_last'': True, ''save_top_k'': 1, ''mode'': ''max'', ''auto_insert_metric_name'': False, ''save_weights_only'': False, ''every_n_train_steps'': None, ''train_time_interval'': None, ''every_n_epochs'': None, ''save_on_train_epoch_end'': None}, ''early_stopping'': {''_target_'': ''pytorch_lightning.callbacks.EarlyStopping'', ''monitor'': ''${optimized_metric}'', ''min_delta'': 0.0, ''patience'': 500, ''verbose'': False, ''mode'': ''max'', ''strict'': True, ''check_finite'': True, ''stopping_threshold'': None, ''divergence_threshold'': None, ''check_on_train_epoch_end'': None}, ''model_summary'': {''_target_'': ''pytorch_lightning.callbacks.RichModelSummary'', ''max_depth'': -1}, ''rich_progress_bar'': {''_target_'': ''pytorch_lightning.callbacks.RichProgressBar''}, ''lr_monitor'': {''_target_'': ''pytorch_lightning.callbacks.LearningRateMonitor'', ''logging_interval'': ''epoch'', ''log_momentum'': True}, ''gradient_accumulator'': {''_target_'': ''pytorch_lightning.callbacks.GradientAccumulationScheduler'', ''scheduling'': {0: 1}}}'
ckpt_path:
    value: null
datamodule:
    value: '{''partition_hf'': [''linearity'', ''planarity'', ''scattering'', ''elevation''], ''point_hf'': [''intensity'', ''linearity'', ''planarity'', ''scattering'', ''verticality'', ''elevation''], ''segment_base_hf'': [], ''segment_mean_hf'': [], ''segment_std_hf'': [], ''edge_hf'': [''mean_off'', ''std_off'', ''mean_dist'', ''angle_source'', ''angle_target'', ''centroid_dir'', ''centroid_dist'', ''normal_angle'', ''log_length'', ''log_surface'', ''log_volume'', ''log_size''], ''v_edge_hf'': [], ''h_edge_hf_need_normal'': ''${eval:\''("normal_angle" in ${datamodule.edge_hf}) or ("angle_source" in ${datamodule.edge_hf}) or ("angle_target" in ${datamodule.edge_hf})\''}'', ''v_edge_hf_need_normal'': ''${eval:\''"normal_angle" in ${datamodule.v_edge_hf}\''}'', ''edge_hf_need_log_length'': ''${eval:\''"log_length" in ${datamodule.edge_hf} + ${datamodule.v_edge_hf}\''}'', ''edge_hf_need_log_surface'': ''${eval:\''"log_surface" in ${datamodule.edge_hf} + ${datamodule.v_edge_hf}\''}'', ''edge_hf_need_log_volume'': ''${eval:\''"log_volume" in ${datamodule.edge_hf} + ${datamodule.v_edge_hf}\''}'', ''edge_hf_need_log_size'': ''${eval:\''"log_size" in ${datamodule.edge_hf} + ${datamodule.v_edge_hf}\''}'', ''extra_point_hf'': ''${eval:\''["normal"] * ${datamodule.v_edge_hf_need_normal}\''}'', ''extra_segment_hf'': ''${eval:\''["normal"] * (${datamodule.h_edge_hf_need_normal} + ${datamodule.v_edge_hf_need_normal}) + ["log_length"] * ${datamodule.edge_hf_need_log_length} + ["log_surface"] * ${datamodule.edge_hf_need_log_surface} + ["log_volume"] * ${datamodule.edge_hf_need_log_volume} + ["log_size"] * ${datamodule.edge_hf_need_log_size}\''}'', ''segment_hf'': ''${eval:\''${datamodule.segment_base_hf} + ["mean_" + x for x in ${datamodule.segment_mean_hf}] + ["std_" + x for x in ${datamodule.segment_std_hf}]\''}'', ''point_hf_preprocess'': "${eval:''list(set( ${datamodule.partition_hf} + ${datamodule.point_hf} + ${datamodule.segment_mean_hf} + ${datamodule.segment_std_hf} + ${datamodule.extra_point_hf} )) if ${datamodule.lite_preprocessing} else None''}", ''segment_base_hf_preprocess'': "${eval:''list(set( ${datamodule.segment_base_hf} + ${datamodule.extra_segment_hf} )) if ${datamodule.lite_preprocessing} else None''}", ''segment_mean_hf_preprocess'': "${eval:''${datamodule.segment_mean_hf} if ${datamodule.lite_preprocessing} else None''}", ''segment_std_hf_preprocess'': "${eval:''${datamodule.segment_std_hf} if ${datamodule.lite_preprocessing} else None''}", ''num_hf_point'': "${eval:''sum([ ${datamodule.feat_size}[k] for k in ${datamodule.point_hf} ])''}", ''num_hf_segment'': "${eval:''sum([ ${datamodule.feat_size}[k] for k in ${datamodule.segment_hf} ])''}", ''num_hf_edge'': "${eval:''sum([ ${datamodule.feat_size}[k] for k in ${datamodule.edge_hf} ])''}", ''num_hf_v_edge'': "${eval:''sum([ ${datamodule.feat_size}[k] for k in ${datamodule.v_edge_hf} ])''}", ''obj_key'': [''obj''], ''point_full_res_key'': [''sub''], ''point_save_keys'': None, ''point_no_save_keys'': [''edge_index'', ''edge_attr'', ''neighbor_index'', ''neighbor_distance'', ''node_size'', ''grid_size''], ''segment_save_keys'': None, ''point_basic_load_keys'': [''pos'', ''pos_offset'', ''y'', ''obj'', ''super_index''], ''segment_basic_load_keys'': [''pos'', ''y'', ''super_index'', ''sub'', ''edge_index'', ''edge_attr''], ''point_load_keys'': "${eval:''list(set( ${datamodule.point_basic_load_keys} + ${datamodule.obj_key} * ${datamodule.instance} + ${datamodule.point_hf} + ${datamodule.extra_point_hf} + ${datamodule.point_full_res_key} * ${datamodule.load_full_res_idx} ))''}", ''segment_load_keys'': "${eval:''list(set( ${datamodule.segment_basic_load_keys} + ${datamodule.obj_key} * ${datamodule.instance} + ${datamodule.segment_hf} + ${datamodule.extra_segment_hf} ))''}", ''feat_size'': {''pos'': 3, ''pos_room'': 3, ''rgb'': 3, ''hsv'': 3, ''lab'': 3, ''density'': 1, ''linearity'': 1, ''planarity'': 1, ''scattering'': 1, ''verticality'': 1, ''normal'': 3, ''length'': 1, ''surface'': 1, ''volume'': 1, ''curvature'': 1, ''elevation'': 1, ''size'': 1, ''intensity'': 1, ''log_pos'': 3, ''log_pos_room'': 3, ''log_rgb'': 3, ''log_hsv'': 3, ''log_lab'': 3, ''log_density'': 1, ''log_linearity'': 1, ''log_planarity'': 1, ''log_scattering'': 1, ''log_verticality'': 1, ''log_normal'': 3, ''log_length'': 1, ''log_surface'': 1, ''log_volume'': 1, ''log_curvature'': 1, ''log_elevation'': 1, ''log_size'': 1, ''mean_pos'': 3, ''mean_pos_room'': 3, ''mean_rgb'': 3, ''mean_hsv'': 3, ''mean_lab'': 3, ''mean_density'': 1, ''mean_linearity'': 1, ''mean_planarity'': 1, ''mean_scattering'': 1, ''mean_verticality'': 1, ''mean_normal'': 3, ''mean_length'': 1, ''mean_surface'': 1, ''mean_volume'': 1, ''mean_curvature'': 1, ''mean_elevation'': 1, ''mean_size'': 1, ''mean_intensity'': 1, ''std_pos'': 3, ''std_pos_room'': 3, ''std_rgb'': 3, ''std_hsv'': 3, ''std_lab'': 3, ''std_density'': 1, ''std_linearity'': 1, ''std_planarity'': 1, ''std_scattering'': 1, ''std_verticality'': 1, ''std_normal'': 3, ''std_length'': 1, ''std_surface'': 1, ''std_volume'': 1, ''std_curvature'': 1, ''std_elevation'': 1, ''std_size'': 1, ''std_intensity'': 1, ''mean_off'': 3, ''std_off'': 3, ''mean_dist'': 1, ''angle_source'': 1, ''angle_target'': 1, ''centroid_dir'': 3, ''centroid_dist'': 1, ''normal_angle'': 1}, ''_target_'': ''src.datamodules.building.BUILDINGDataModule'', ''data_dir'': ''${paths.data_dir}'', ''num_classes'': 3, ''stuff_classes'': [1], ''instance'': False, ''instance_k_max'': 30, ''instance_radius'': 0.1, ''min_instance_size'': 100, ''mini'': False, ''save_y_to_csr'': True, ''save_pos_dtype'': ''float32'', ''save_fp_dtype'': ''float16'', ''in_memory'': False, ''lite_preprocessing'': True, ''load_full_res_idx'': False, ''max_num_nodes'': 50000, ''max_num_edges'': 1000000, ''pre_transform'': [{''transform'': ''SaveNodeIndex'', ''params'': {''key'': ''sub''}}, {''transform'': ''DataTo'', ''params'': {''device'': ''cuda''}}, {''transform'': ''GridSampling3D'', ''params'': {''size'': ''${datamodule.voxel}'', ''hist_key'': ''y'', ''hist_size'': "${eval:''${datamodule.num_classes} + 1''}"}}, {''transform'': ''KNN'', ''params'': {''k'': ''${datamodule.knn}'', ''r_max'': ''${datamodule.knn_r}'', ''verbose'': False}}, {''transform'': ''DataTo'', ''params'': {''device'': ''cpu''}}, {''transform'': ''GroundElevation'', ''params'': {''threshold'': ''${datamodule.ground_threshold}'', ''scale'': ''${datamodule.ground_scale}''}}, {''transform'': ''PointFeatures'', ''params'': {''keys'': ''${datamodule.point_hf_preprocess}'', ''k_min'': 1, ''k_step'': ''${datamodule.knn_step}'', ''k_min_search'': ''${datamodule.knn_min_search}''}}, {''transform'': ''DataTo'', ''params'': {''device'': ''cuda''}}, {''transform'': ''AdjacencyGraph'', ''params'': {''k'': ''${datamodule.pcp_k_adjacency}'', ''w'': ''${datamodule.pcp_w_adjacency}''}}, {''transform'': ''ConnectIsolated'', ''params'': {''k'': 1}}, {''transform'': ''DataTo'', ''params'': {''device'': ''cpu''}}, {''transform'': ''AddKeysTo'', ''params'': {''keys'': ''${datamodule.partition_hf}'', ''to'': ''x'', ''delete_after'': False}}, {''transform'': ''CutPursuitPartition'', ''params'': {''regularization'': ''${datamodule.pcp_regularization}'', ''spatial_weight'': ''${datamodule.pcp_spatial_weight}'', ''k_adjacency'': ''${datamodule.pcp_k_adjacency}'', ''cutoff'': ''${datamodule.pcp_cutoff}'', ''iterations'': ''${datamodule.pcp_iterations}'', ''parallel'': True, ''verbose'': False}}, {''transform'': ''NAGRemoveKeys'', ''params'': {''level'': ''all'', ''keys'': ''x''}}, {''transform'': ''NAGTo'', ''params'': {''device'': ''cuda''}}, {''transform'': ''SegmentFeatures'', ''params'': {''n_min'': 32, ''n_max'': 128, ''keys'': ''${datamodule.segment_base_hf_preprocess}'', ''mean_keys'': ''${datamodule.segment_mean_hf_preprocess}'', ''std_keys'': ''${datamodule.segment_std_hf_preprocess}'', ''strict'': False}}, {''transform'': ''RadiusHorizontalGraph'', ''params'': {''k_min'': ''${datamodule.graph_k_min}'', ''k_max'': ''${datamodule.graph_k_max}'', ''gap'': ''${datamodule.graph_gap}'', ''se_ratio'': ''${datamodule.graph_se_ratio}'', ''se_min'': ''${datamodule.graph_se_min}'', ''cycles'': ''${datamodule.graph_cycles}'', ''margin'': ''${datamodule.graph_margin}'', ''chunk_size'': ''${datamodule.graph_chunk}'', ''halfspace_filter'': True, ''bbox_filter'': True, ''target_pc_flip'': True, ''source_pc_sort'': False, ''keys'': [''mean_off'', ''std_off'', ''mean_dist'']}}, {''transform'': ''NAGTo'', ''params'': {''device'': ''cpu''}}], ''train_transform'': None, ''val_transform'': ''${datamodule.train_transform}'', ''test_transform'': ''${datamodule.val_transform}'', ''on_device_train_transform'': [{''transform'': ''NodeSize''}, {''transform'': ''SampleSubNodes'', ''params'': {''low'': 0, ''high'': 1, ''n_min'': ''${datamodule.sample_point_min}'', ''n_max'': ''${datamodule.sample_point_max}''}}, {''transform'': ''SampleRadiusSubgraphs'', ''params'': {''r'': ''${datamodule.sample_graph_r}'', ''k'': ''${datamodule.sample_graph_k}'', ''i_level'': 1, ''by_size'': False, ''by_class'': False, ''disjoint'': ''${datamodule.sample_graph_disjoint}''}}, {''transform'': ''SampleSegments'', ''params'': {''ratio'': ''${datamodule.sample_segment_ratio}'', ''by_size'': ''${datamodule.sample_segment_by_size}'', ''by_class'': ''${datamodule.sample_segment_by_class}''}}, {''transform'': ''NAGRestrictSize'', ''params'': {''level'': ''1+'', ''num_nodes'': ''${datamodule.max_num_nodes}''}}, {''transform'': ''NAGCast''}, {''transform'': ''NAGJitterKey'', ''params'': {''key'': ''pos'', ''sigma'': ''${datamodule.pos_jitter}'', ''trunc'': ''${datamodule.voxel}''}}, {''transform'': ''RandomTiltAndRotate'', ''params'': {''phi'': ''${datamodule.tilt_n_rotate_phi}'', ''theta'': ''${datamodule.tilt_n_rotate_theta}''}}, {''transform'': ''RandomAnisotropicScale'', ''params'': {''delta'': ''${datamodule.anisotropic_scaling}''}}, {''transform'': ''RandomAxisFlip'', ''params'': {''p'': 0.5}}, {''transform'': ''OnTheFlyHorizontalEdgeFeatures'', ''params'': {''keys'': ''${datamodule.edge_hf}'', ''use_mean_normal'': ''${eval:\''"normal" in ${datamodule.segment_mean_hf}\''}''}}, {''transform'': ''OnTheFlyVerticalEdgeFeatures'', ''params'': {''keys'': ''${datamodule.v_edge_hf}'', ''use_mean_normal'': ''${eval:\''"normal" in ${datamodule.segment_mean_hf}\''}''}}, {''transform'': ''SampleEdges'', ''params'': {''level'': ''1+'', ''n_min'': ''${datamodule.sample_edge_n_min}'', ''n_max'': ''${datamodule.sample_edge_n_max}''}}, {''transform'': ''NAGRestrictSize'', ''params'': {''level'': ''1+'', ''num_edges'': ''${datamodule.max_num_edges}''}}, {''transform'': ''NAGAddKeysTo'', ''params'': {''level'': 0, ''keys'': "${eval:''ListConfig(${datamodule.point_hf})''}", ''to'': ''x''}}, {''transform'': ''NAGAddKeysTo'', ''params'': {''level'': ''1+'', ''keys'': "${eval:''ListConfig(${datamodule.segment_hf})''}", ''to'': ''x''}}, {''transform'': ''NAGJitterKey'', ''params'': {''key'': ''x'', ''sigma'': ''${datamodule.node_feat_jitter}'', ''trunc'': "${eval:''2 * ${datamodule.node_feat_jitter}''}"}}, {''transform'': ''NAGJitterKey'', ''params'': {''key'': ''edge_attr'', ''sigma'': ''${datamodule.h_edge_feat_jitter}'', ''trunc'': "${eval:''2 * ${datamodule.h_edge_feat_jitter}''}"}}, {''transform'': ''NAGJitterKey'', ''params'': {''key'': ''v_edge_attr'', ''sigma'': ''${datamodule.v_edge_feat_jitter}'', ''trunc'': "${eval:''2 * ${datamodule.v_edge_feat_jitter}''}"}}, {''transform'': ''NAGDropoutColumns'', ''params'': {''p'': ''${datamodule.node_feat_drop}'', ''key'': ''x'', ''inplace'': True, ''to_mean'': ''${datamodule.drop_to_mean}''}}, {''transform'': ''NAGDropoutColumns'', ''params'': {''p'': ''${datamodule.h_edge_feat_drop}'', ''key'': ''edge_attr'', ''inplace'': True, ''to_mean'': ''${datamodule.drop_to_mean}''}}, {''transform'': ''NAGDropoutColumns'', ''params'': {''p'': ''${datamodule.v_edge_feat_drop}'', ''key'': ''v_edge_attr'', ''inplace'': True, ''to_mean'': ''${datamodule.drop_to_mean}''}}, {''transform'': ''NAGDropoutRows'', ''params'': {''p'': ''${datamodule.node_row_drop}'', ''key'': ''x'', ''to_mean'': ''${datamodule.drop_to_mean}''}}, {''transform'': ''NAGDropoutRows'', ''params'': {''p'': ''${datamodule.h_edge_row_drop}'', ''key'': ''edge_attr'', ''to_mean'': ''${datamodule.drop_to_mean}''}}, {''transform'': ''NAGDropoutRows'', ''params'': {''p'': ''${datamodule.v_edge_row_drop}'', ''key'': ''v_edge_attr'', ''to_mean'': ''${datamodule.drop_to_mean}''}}, {''transform'': ''NAGAddSelfLoops''}, {''transform'': ''OnTheFlyInstanceGraph'', ''params'': {''level'': "${eval:''1 if ${datamodule.instance} else -1''}", ''num_classes'': ''${datamodule.num_classes}'', ''k_max'': ''${datamodule.instance_k_max}'', ''radius'': ''${datamodule.instance_radius}''}}], ''on_device_val_transform'': [{''transform'': ''NodeSize''}, {''transform'': ''NAGCast''}, {''transform'': ''OnTheFlyHorizontalEdgeFeatures'', ''params'': {''keys'': [''mean_off'', ''std_off'', ''mean_dist'', ''angle_source'', ''angle_target'', ''centroid_dir'', ''centroid_dist'', ''normal_angle'', ''log_length'', ''log_surface'', ''log_volume'', ''log_size''], ''use_mean_normal'': False}}, {''transform'': ''OnTheFlyVerticalEdgeFeatures'', ''params'': {''keys'': [], ''use_mean_normal'': False}}, {''transform'': ''NAGAddKeysTo'', ''params'': {''level'': 0, ''keys'': [''intensity'', ''linearity'', ''planarity'', ''scattering'', ''verticality'', ''elevation''], ''to'': ''x''}}, {''transform'': ''NAGAddKeysTo'', ''params'': {''level'': ''1+'', ''keys'': [], ''to'': ''x''}}, {''transform'': ''NAGAddSelfLoops''}, {''transform'': ''OnTheFlyInstanceGraph'', ''params'': {''level'': -1, ''num_classes'': 3, ''k_max'': 30, ''radius'': 0.1}}], ''on_device_test_transform'': ''${datamodule.on_device_val_transform}'', ''tta_runs'': None, ''tta_val'': False, ''submit'': False, ''dataloader'': {''batch_size'': 1, ''num_workers'': 4, ''pin_memory'': True, ''persistent_workers'': True}, ''trainval'': True, ''val_on_test'': True, ''xy_tiling'': None, ''voxel'': 0.03, ''knn'': 45, ''knn_r'': 2, ''knn_step'': -1, ''knn_min_search'': 25, ''ground_threshold'': 1.5, ''ground_scale'': 4.0, ''pcp_regularization'': [0.01, 0.1, 0.5], ''pcp_spatial_weight'': [0.1, 0.1, 0.1], ''pcp_cutoff'': [10, 10, 10], ''pcp_k_adjacency'': 10, ''pcp_w_adjacency'': 1, ''pcp_iterations'': 15, ''graph_k_min'': 1, ''graph_k_max'': 30, ''graph_gap'': [0.2, 0.5, 1], ''graph_se_ratio'': 0.3, ''graph_se_min'': 20, ''graph_cycles'': 3, ''graph_margin'': 0.2, ''graph_chunk'': [1000000.0, 100000.0, 100000.0], ''sample_segment_ratio'': 0.2, ''sample_segment_by_size'': True, ''sample_segment_by_class'': False, ''sample_point_min'': 32, ''sample_point_max'': 128, ''sample_graph_r'': 7, ''sample_graph_k'': 4, ''sample_graph_disjoint'': True, ''sample_edge_n_min'': -1, ''sample_edge_n_max'': -1, ''pos_jitter'': 0.03, ''tilt_n_rotate_phi'': 0.1, ''tilt_n_rotate_theta'': 180, ''anisotropic_scaling'': 0.2, ''rgb_jitter'': 0, ''rgb_autocontrast'': 0.5, ''rgb_drop'': 0.3, ''node_feat_jitter'': 0.01, ''h_edge_feat_jitter'': 0.01, ''v_edge_feat_jitter'': 0, ''node_feat_drop'': 0.3, ''h_edge_feat_drop'': 0, ''v_edge_feat_drop'': 0, ''node_row_drop'': 0, ''h_edge_row_drop'': 0, ''v_edge_row_drop'': 0, ''drop_to_mean'': False}'
extras:
    value: '{''ignore_warnings'': False, ''enforce_tags'': True, ''print_config'': True}'
model:
    value: '{''_target_'': ''src.models.semantic.SemanticSegmentationModule'', ''num_classes'': ''${datamodule.num_classes}'', ''sampling_loss'': False, ''loss_type'': ''ce_kl'', ''weighted_loss'': True, ''init_linear'': None, ''init_rpe'': None, ''multi_stage_loss_lambdas'': [1, 50], ''transformer_lr_scale'': 0.1, ''gc_every_n_steps'': 0, ''optimizer'': {''_target_'': ''torch.optim.AdamW'', ''_partial_'': True, ''lr'': 0.1, ''weight_decay'': 0.01}, ''scheduler'': {''_target_'': ''src.optim.CosineAnnealingLRWithWarmup'', ''_partial_'': True, ''T_max'': "${eval:''${trainer.max_epochs} - ${model.scheduler.num_warmup}''}", ''eta_min'': 1e-06, ''warmup_init_lr'': 1e-06, ''num_warmup'': 20, ''warmup_strategy'': ''cos''}, ''criterion'': {''_target_'': ''torch.nn.CrossEntropyLoss'', ''ignore_index'': ''${datamodule.num_classes}''}, ''_point_mlp'': [32, 64, 128], ''_node_mlp_out'': 32, ''_h_edge_mlp_out'': 32, ''_v_edge_mlp_out'': 32, ''_point_hf_dim'': "${eval:''${model.net.use_pos} * 3 + ${datamodule.num_hf_point} + ${model.net.use_diameter_parent}''}", ''_node_hf_dim'': "${eval:''${model.net.use_node_hf} * ${datamodule.num_hf_segment}''}", ''_node_injection_dim'': "${eval:''${model.net.use_pos} * 3 + ${model.net.use_diameter} + ${model.net.use_diameter_parent} + (${model._node_mlp_out} if ${model._node_mlp_out} and ${model.net.use_node_hf} and ${model._node_hf_dim} > 0 else ${model._node_hf_dim})''}", ''_h_edge_hf_dim'': ''${datamodule.num_hf_edge}'', ''_v_edge_hf_dim'': ''${datamodule.num_hf_v_edge}'', ''_down_dim'': [64, 64, 64, 64], ''_up_dim'': [64, 64, 64], ''_mlp_depth'': 2, ''net'': {''point_mlp'': "${eval:''[${model._point_hf_dim}] + ${model._point_mlp}''}", ''point_drop'': None, ''down_dim'': "${eval:''${model._down_dim}[:2]''}", ''down_pool_dim'': "${eval:''[${model._point_mlp}[-1]] + ${model._down_dim}[:-1]''}", ''down_in_mlp'': "${eval:''[ [${model._node_injection_dim} + ${model._point_mlp}[-1] * (not ${model.net.nano}) + ${datamodule.num_hf_segment} * (${model.net.nano} and not ${model.net.use_node_hf})] + [${model._down_dim}[0]] * ${model._mlp_depth}, [${model._node_injection_dim} + ${model._down_dim}[0]] + [${model._down_dim}[1]] * ${model._mlp_depth} ]''}", ''down_out_mlp'': None, ''down_mlp_drop'': None, ''down_num_heads'': 16, ''down_num_blocks'': 3, ''down_ffn_ratio'': 1, ''down_residual_drop'': None, ''down_attn_drop'': None, ''down_drop_path'': None, ''up_dim'': "${eval:''${model._up_dim}[:1]''}", ''up_in_mlp'': "${eval:''[ [${model._node_injection_dim} + ${model._down_dim}[-1] + ${model._down_dim}[-2]] + [${model._up_dim}[0]] * ${model._mlp_depth} ]''}", ''up_out_mlp'': ''${model.net.down_out_mlp}'', ''up_mlp_drop'': ''${model.net.down_mlp_drop}'', ''up_num_heads'': ''${model.net.down_num_heads}'', ''up_num_blocks'': 1, ''up_ffn_ratio'': ''${model.net.down_ffn_ratio}'', ''up_residual_drop'': ''${model.net.down_residual_drop}'', ''up_attn_drop'': ''${model.net.down_attn_drop}'', ''up_drop_path'': ''${model.net.down_drop_path}'', ''activation'': {''_target_'': ''torch.nn.LeakyReLU''}, ''norm'': {''_target_'': ''src.nn.GraphNorm'', ''_partial_'': True}, ''pre_norm'': True, ''no_sa'': False, ''no_ffn'': True, ''qk_dim'': 4, ''qkv_bias'': True, ''qk_scale'': None, ''in_rpe_dim'': "${eval:''${model._h_edge_mlp_out} if ${model._h_edge_mlp_out} else ${model._h_edge_hf_dim}''}", ''k_rpe'': True, ''q_rpe'': True, ''v_rpe'': True, ''k_delta_rpe'': False, ''q_delta_rpe'': False, ''qk_share_rpe'': False, ''q_on_minus_rpe'': False, ''stages_share_rpe'': False, ''blocks_share_rpe'': False, ''heads_share_rpe'': False, ''_target_'': ''src.models.components.spt.SPT'', ''nano'': False, ''node_mlp'': "${eval:''[${model._node_hf_dim}] + [${model._node_mlp_out}] * ${model._mlp_depth} if ${model._node_mlp_out} and ${model.net.use_node_hf} and ${model._node_hf_dim} > 0 else None''}", ''h_edge_mlp'': "${eval:''[${model._h_edge_hf_dim}] + [${model._h_edge_mlp_out}] * ${model._mlp_depth} if ${model._h_edge_mlp_out} else None''}", ''v_edge_mlp'': "${eval:''[${model._v_edge_hf_dim}] + [${model._v_edge_mlp_out}] * ${model._mlp_depth} if ${model._v_edge_mlp_out} else None''}", ''share_hf_mlps'': False, ''mlp_activation'': {''_target_'': ''torch.nn.LeakyReLU''}, ''mlp_norm'': {''_target_'': ''src.nn.GraphNorm'', ''_partial_'': True}, ''use_pos'': True, ''use_node_hf'': True, ''use_diameter'': False, ''use_diameter_parent'': True, ''pool'': ''max'', ''unpool'': ''index'', ''fusion'': ''cat'', ''norm_mode'': ''graph''}}'
model/params/non_trainable:
    value: 0
model/params/total:
    value: 212070
model/params/trainable:
    value: 212070
seed:
    value: null
tags:
    value: '[''dev'']'
task_name:
    value: train
trainer:
    value: '{''_target_'': ''pytorch_lightning.Trainer'', ''default_root_dir'': ''${paths.output_dir}'', ''min_epochs'': 1, ''max_epochs'': 2000, ''accelerator'': ''gpu'', ''devices'': 1, ''check_val_every_n_epoch'': 10, ''deterministic'': False, ''precision'': 32}'
