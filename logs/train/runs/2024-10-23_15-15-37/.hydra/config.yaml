task_name: train
optimized_metric: val/miou
tags:
- dev
train: true
test: true
compile: false
ckpt_path: null
seed: null
float32_matmul_precision: high
datamodule:
  partition_hf:
  - rgb
  - linearity
  - planarity
  - scattering
  - verticality
  - elevation
  point_hf:
  - linearity
  - planarity
  - scattering
  - verticality
  - elevation
  - rgb
  segment_base_hf: []
  segment_mean_hf: []
  segment_std_hf: []
  edge_hf:
  - mean_off
  - std_off
  - mean_dist
  - angle_source
  - angle_target
  - centroid_dir
  - centroid_dist
  - normal_angle
  - log_length
  - log_surface
  - log_volume
  - log_size
  v_edge_hf: []
  h_edge_hf_need_normal: ${eval:'("normal_angle" in ${datamodule.edge_hf}) or ("angle_source"
    in ${datamodule.edge_hf}) or ("angle_target" in ${datamodule.edge_hf})'}
  v_edge_hf_need_normal: ${eval:'"normal_angle" in ${datamodule.v_edge_hf}'}
  edge_hf_need_log_length: ${eval:'"log_length" in ${datamodule.edge_hf} + ${datamodule.v_edge_hf}'}
  edge_hf_need_log_surface: ${eval:'"log_surface" in ${datamodule.edge_hf} + ${datamodule.v_edge_hf}'}
  edge_hf_need_log_volume: ${eval:'"log_volume" in ${datamodule.edge_hf} + ${datamodule.v_edge_hf}'}
  edge_hf_need_log_size: ${eval:'"log_size" in ${datamodule.edge_hf} + ${datamodule.v_edge_hf}'}
  extra_point_hf: ${eval:'["normal"] * ${datamodule.v_edge_hf_need_normal}'}
  extra_segment_hf: ${eval:'["normal"] * (${datamodule.h_edge_hf_need_normal} + ${datamodule.v_edge_hf_need_normal})
    + ["log_length"] * ${datamodule.edge_hf_need_log_length} + ["log_surface"] * ${datamodule.edge_hf_need_log_surface}
    + ["log_volume"] * ${datamodule.edge_hf_need_log_volume} + ["log_size"] * ${datamodule.edge_hf_need_log_size}'}
  segment_hf: ${eval:'${datamodule.segment_base_hf} + ["mean_" + x for x in ${datamodule.segment_mean_hf}]
    + ["std_" + x for x in ${datamodule.segment_std_hf}]'}
  point_hf_preprocess: ${eval:'list(set( ${datamodule.partition_hf} + ${datamodule.point_hf}
    + ${datamodule.segment_mean_hf} + ${datamodule.segment_std_hf} + ${datamodule.extra_point_hf}
    )) if ${datamodule.lite_preprocessing} else None'}
  segment_base_hf_preprocess: ${eval:'list(set( ${datamodule.segment_base_hf} + ${datamodule.extra_segment_hf}
    )) if ${datamodule.lite_preprocessing} else None'}
  segment_mean_hf_preprocess: ${eval:'${datamodule.segment_mean_hf} if ${datamodule.lite_preprocessing}
    else None'}
  segment_std_hf_preprocess: ${eval:'${datamodule.segment_std_hf} if ${datamodule.lite_preprocessing}
    else None'}
  num_hf_point: ${eval:'sum([ ${datamodule.feat_size}[k] for k in ${datamodule.point_hf}
    ])'}
  num_hf_segment: ${eval:'sum([ ${datamodule.feat_size}[k] for k in ${datamodule.segment_hf}
    ])'}
  num_hf_edge: ${eval:'sum([ ${datamodule.feat_size}[k] for k in ${datamodule.edge_hf}
    ])'}
  num_hf_v_edge: ${eval:'sum([ ${datamodule.feat_size}[k] for k in ${datamodule.v_edge_hf}
    ])'}
  obj_key:
  - obj
  point_full_res_key:
  - sub
  point_save_keys: null
  point_no_save_keys:
  - edge_index
  - edge_attr
  - neighbor_index
  - neighbor_distance
  - node_size
  - grid_size
  segment_save_keys: null
  point_basic_load_keys:
  - pos
  - pos_offset
  - 'y'
  - obj
  - super_index
  segment_basic_load_keys:
  - pos
  - 'y'
  - super_index
  - sub
  - edge_index
  - edge_attr
  point_load_keys: ${eval:'list(set( ${datamodule.point_basic_load_keys} + ${datamodule.obj_key}
    * ${datamodule.instance} + ${datamodule.point_hf} + ${datamodule.extra_point_hf}
    + ${datamodule.point_full_res_key} * ${datamodule.load_full_res_idx} ))'}
  segment_load_keys: ${eval:'list(set( ${datamodule.segment_basic_load_keys} + ${datamodule.obj_key}
    * ${datamodule.instance} + ${datamodule.segment_hf} + ${datamodule.extra_segment_hf}
    ))'}
  feat_size:
    pos: 3
    pos_room: 3
    rgb: 3
    hsv: 3
    lab: 3
    density: 1
    linearity: 1
    planarity: 1
    scattering: 1
    verticality: 1
    normal: 3
    length: 1
    surface: 1
    volume: 1
    curvature: 1
    elevation: 1
    size: 1
    intensity: 1
    log_pos: 3
    log_pos_room: 3
    log_rgb: 3
    log_hsv: 3
    log_lab: 3
    log_density: 1
    log_linearity: 1
    log_planarity: 1
    log_scattering: 1
    log_verticality: 1
    log_normal: 3
    log_length: 1
    log_surface: 1
    log_volume: 1
    log_curvature: 1
    log_elevation: 1
    log_size: 1
    mean_pos: 3
    mean_pos_room: 3
    mean_rgb: 3
    mean_hsv: 3
    mean_lab: 3
    mean_density: 1
    mean_linearity: 1
    mean_planarity: 1
    mean_scattering: 1
    mean_verticality: 1
    mean_normal: 3
    mean_length: 1
    mean_surface: 1
    mean_volume: 1
    mean_curvature: 1
    mean_elevation: 1
    mean_size: 1
    mean_intensity: 1
    std_pos: 3
    std_pos_room: 3
    std_rgb: 3
    std_hsv: 3
    std_lab: 3
    std_density: 1
    std_linearity: 1
    std_planarity: 1
    std_scattering: 1
    std_verticality: 1
    std_normal: 3
    std_length: 1
    std_surface: 1
    std_volume: 1
    std_curvature: 1
    std_elevation: 1
    std_size: 1
    std_intensity: 1
    mean_off: 3
    std_off: 3
    mean_dist: 1
    angle_source: 1
    angle_target: 1
    centroid_dir: 3
    centroid_dist: 1
    normal_angle: 1
  _target_: src.datamodules.s3dis.S3DISDataModule
  data_dir: ${paths.data_dir}
  num_classes: 13
  stuff_classes: []
  instance: false
  instance_k_max: 30
  instance_radius: 0.1
  min_instance_size: 100
  mini: false
  save_y_to_csr: true
  save_pos_dtype: float32
  save_fp_dtype: float16
  in_memory: true
  lite_preprocessing: true
  load_full_res_idx: false
  max_num_nodes: 50000
  max_num_edges: 1000000
  pre_transform:
  - transform: SaveNodeIndex
    params:
      key: sub
  - transform: DataTo
    params:
      device: cuda
  - transform: GridSampling3D
    params:
      size: ${datamodule.voxel}
      hist_key: 'y'
      hist_size: ${eval:'${datamodule.num_classes} + 1'}
  - transform: KNN
    params:
      k: ${datamodule.knn}
      r_max: ${datamodule.knn_r}
      verbose: false
  - transform: DataTo
    params:
      device: cpu
  - transform: GroundElevation
    params:
      threshold: ${datamodule.ground_threshold}
      scale: ${datamodule.ground_scale}
  - transform: PointFeatures
    params:
      keys: ${datamodule.point_hf_preprocess}
      k_min: 1
      k_step: ${datamodule.knn_step}
      k_min_search: ${datamodule.knn_min_search}
  - transform: DataTo
    params:
      device: cuda
  - transform: AdjacencyGraph
    params:
      k: ${datamodule.pcp_k_adjacency}
      w: ${datamodule.pcp_w_adjacency}
  - transform: ConnectIsolated
    params:
      k: 1
  - transform: DataTo
    params:
      device: cpu
  - transform: AddKeysTo
    params:
      keys: ${datamodule.partition_hf}
      to: x
      delete_after: false
  - transform: CutPursuitPartition
    params:
      regularization: ${datamodule.pcp_regularization}
      spatial_weight: ${datamodule.pcp_spatial_weight}
      k_adjacency: ${datamodule.pcp_k_adjacency}
      cutoff: ${datamodule.pcp_cutoff}
      iterations: ${datamodule.pcp_iterations}
      parallel: true
      verbose: false
  - transform: NAGRemoveKeys
    params:
      level: all
      keys: x
  - transform: NAGTo
    params:
      device: cuda
  - transform: SegmentFeatures
    params:
      n_min: 32
      n_max: 128
      keys: ${datamodule.segment_base_hf_preprocess}
      mean_keys: ${datamodule.segment_mean_hf_preprocess}
      std_keys: ${datamodule.segment_std_hf_preprocess}
      strict: false
  - transform: RadiusHorizontalGraph
    params:
      k_min: ${datamodule.graph_k_min}
      k_max: ${datamodule.graph_k_max}
      gap: ${datamodule.graph_gap}
      se_ratio: ${datamodule.graph_se_ratio}
      se_min: ${datamodule.graph_se_min}
      cycles: ${datamodule.graph_cycles}
      margin: ${datamodule.graph_margin}
      chunk_size: ${datamodule.graph_chunk}
      halfspace_filter: true
      bbox_filter: true
      target_pc_flip: true
      source_pc_sort: false
      keys:
      - mean_off
      - std_off
      - mean_dist
  - transform: NAGTo
    params:
      device: cpu
  train_transform: null
  val_transform: ${datamodule.train_transform}
  test_transform: ${datamodule.val_transform}
  on_device_train_transform:
  - transform: NodeSize
  - transform: SampleSubNodes
    params:
      low: 0
      high: 1
      n_min: ${datamodule.sample_point_min}
      n_max: ${datamodule.sample_point_max}
  - transform: SampleRadiusSubgraphs
    params:
      r: ${datamodule.sample_graph_r}
      k: ${datamodule.sample_graph_k}
      i_level: 1
      by_size: false
      by_class: false
      disjoint: ${datamodule.sample_graph_disjoint}
  - transform: SampleSegments
    params:
      ratio: ${datamodule.sample_segment_ratio}
      by_size: ${datamodule.sample_segment_by_size}
      by_class: ${datamodule.sample_segment_by_class}
  - transform: NAGRestrictSize
    params:
      level: 1+
      num_nodes: ${datamodule.max_num_nodes}
  - transform: NAGCast
  - transform: NAGJitterKey
    params:
      key: pos
      sigma: ${datamodule.pos_jitter}
      trunc: ${datamodule.voxel}
  - transform: RandomTiltAndRotate
    params:
      phi: ${datamodule.tilt_n_rotate_phi}
      theta: ${datamodule.tilt_n_rotate_theta}
  - transform: RandomAnisotropicScale
    params:
      delta: ${datamodule.anisotropic_scaling}
  - transform: RandomAxisFlip
    params:
      p: 0.5
  - transform: OnTheFlyHorizontalEdgeFeatures
    params:
      keys: ${datamodule.edge_hf}
      use_mean_normal: ${eval:'"normal" in ${datamodule.segment_mean_hf}'}
  - transform: OnTheFlyVerticalEdgeFeatures
    params:
      keys: ${datamodule.v_edge_hf}
      use_mean_normal: ${eval:'"normal" in ${datamodule.segment_mean_hf}'}
  - transform: SampleEdges
    params:
      level: 1+
      n_min: ${datamodule.sample_edge_n_min}
      n_max: ${datamodule.sample_edge_n_max}
  - transform: NAGRestrictSize
    params:
      level: 1+
      num_edges: ${datamodule.max_num_edges}
  - transform: NAGAddKeysTo
    params:
      level: 0
      keys: ${eval:'ListConfig([k for k in ${datamodule.point_hf} if k != "rgb"])'}
      to: x
  - transform: NAGAddKeysTo
    params:
      level: 1+
      keys: ${eval:'ListConfig([k for k in ${datamodule.segment_hf} if k != "rgb"])'}
      to: x
  - transform: NAGJitterKey
    params:
      key: x
      sigma: ${datamodule.node_feat_jitter}
      trunc: ${eval:'2 * ${datamodule.node_feat_jitter}'}
  - transform: NAGJitterKey
    params:
      key: edge_attr
      sigma: ${datamodule.h_edge_feat_jitter}
      trunc: ${eval:'2 * ${datamodule.h_edge_feat_jitter}'}
  - transform: NAGJitterKey
    params:
      key: v_edge_attr
      sigma: ${datamodule.v_edge_feat_jitter}
      trunc: ${eval:'2 * ${datamodule.v_edge_feat_jitter}'}
  - transform: NAGDropoutColumns
    params:
      p: ${datamodule.node_feat_drop}
      key: x
      inplace: true
      to_mean: ${datamodule.drop_to_mean}
  - transform: NAGDropoutColumns
    params:
      p: ${datamodule.h_edge_feat_drop}
      key: edge_attr
      inplace: true
      to_mean: ${datamodule.drop_to_mean}
  - transform: NAGDropoutColumns
    params:
      p: ${datamodule.v_edge_feat_drop}
      key: v_edge_attr
      inplace: true
      to_mean: ${datamodule.drop_to_mean}
  - transform: NAGDropoutRows
    params:
      p: ${datamodule.node_row_drop}
      key: x
      to_mean: ${datamodule.drop_to_mean}
  - transform: NAGDropoutRows
    params:
      p: ${datamodule.h_edge_row_drop}
      key: edge_attr
      to_mean: ${datamodule.drop_to_mean}
  - transform: NAGDropoutRows
    params:
      p: ${datamodule.v_edge_row_drop}
      key: v_edge_attr
      to_mean: ${datamodule.drop_to_mean}
  - transform: NAGJitterKey
    params:
      key: rgb
      sigma: ${datamodule.rgb_jitter}
      trunc: ${eval:'2 * ${datamodule.rgb_jitter}'}
  - transform: NAGColorAutoContrast
    params:
      p: ${datamodule.rgb_autocontrast}
  - transform: NAGColorDrop
    params:
      p: ${datamodule.rgb_drop}
  - transform: NAGAddKeysTo
    params:
      keys: rgb
      to: x
      strict: false
  - transform: NAGAddSelfLoops
  - transform: OnTheFlyInstanceGraph
    params:
      level: ${eval:'1 if ${datamodule.instance} else -1'}
      num_classes: ${datamodule.num_classes}
      k_max: ${datamodule.instance_k_max}
      radius: ${datamodule.instance_radius}
  on_device_val_transform:
  - transform: NodeSize
  - transform: NAGCast
  - transform: OnTheFlyHorizontalEdgeFeatures
    params:
      keys: ${datamodule.edge_hf}
      use_mean_normal: ${eval:'"normal" in ${datamodule.segment_mean_hf}'}
  - transform: OnTheFlyVerticalEdgeFeatures
    params:
      keys: ${datamodule.v_edge_hf}
      use_mean_normal: ${eval:'"normal" in ${datamodule.segment_mean_hf}'}
  - transform: NAGAddKeysTo
    params:
      level: 0
      keys: ${eval:'ListConfig([k for k in ${datamodule.point_hf} if k != "rgb"])'}
      to: x
  - transform: NAGAddKeysTo
    params:
      level: 1+
      keys: ${eval:'ListConfig([k for k in ${datamodule.segment_hf} if k != "rgb"])'}
      to: x
  - transform: NAGAddKeysTo
    params:
      keys: rgb
      to: x
      strict: false
  - transform: NAGAddSelfLoops
  - transform: OnTheFlyInstanceGraph
    params:
      level: ${eval:'1 if ${datamodule.instance} else -1'}
      num_classes: ${datamodule.num_classes}
      k_max: ${datamodule.instance_k_max}
      radius: ${datamodule.instance_radius}
  on_device_test_transform: ${datamodule.on_device_val_transform}
  tta_runs: null
  tta_val: false
  submit: false
  dataloader:
    batch_size: 1
    num_workers: 4
    pin_memory: true
    persistent_workers: true
  fold: 5
  trainval: true
  val_on_test: true
  xy_tiling: null
  voxel: 0.03
  knn: 45
  knn_r: 2
  knn_step: -1
  knn_min_search: 25
  ground_threshold: 1.5
  ground_scale: 4.0
  pcp_regularization:
  - 0.01
  - 0.1
  - 0.5
  pcp_spatial_weight:
  - 0.1
  - 0.1
  - 0.1
  pcp_cutoff:
  - 10
  - 10
  - 10
  pcp_k_adjacency: 10
  pcp_w_adjacency: 1
  pcp_iterations: 15
  graph_k_min: 1
  graph_k_max: 30
  graph_gap:
  - 0.2
  - 0.5
  - 1
  graph_se_ratio: 0.3
  graph_se_min: 20
  graph_cycles: 3
  graph_margin: 0.2
  graph_chunk:
  - 1000000.0
  - 100000.0
  - 100000.0
  sample_segment_ratio: 0.1
  sample_segment_by_size: true
  sample_segment_by_class: false
  sample_point_min: 32
  sample_point_max: 128
  sample_graph_r: 7
  sample_graph_k: 4
  sample_graph_disjoint: true
  sample_edge_n_min: -1
  sample_edge_n_max: -1
  pos_jitter: 0.03
  tilt_n_rotate_phi: 0.1
  tilt_n_rotate_theta: 180
  anisotropic_scaling: 0.2
  rgb_jitter: 0
  rgb_autocontrast: 0.5
  rgb_drop: 0.3
  node_feat_jitter: 0.01
  h_edge_feat_jitter: 0.01
  v_edge_feat_jitter: 0
  node_feat_drop: 0.3
  h_edge_feat_drop: 0
  v_edge_feat_drop: 0
  node_row_drop: 0
  h_edge_row_drop: 0
  v_edge_row_drop: 0
  drop_to_mean: false
model:
  _target_: src.models.semantic.SemanticSegmentationModule
  num_classes: ${datamodule.num_classes}
  sampling_loss: false
  loss_type: ce_kl
  weighted_loss: true
  init_linear: null
  init_rpe: null
  multi_stage_loss_lambdas:
  - 1
  - 50
  transformer_lr_scale: 0.1
  gc_every_n_steps: 0
  optimizer:
    _target_: torch.optim.AdamW
    _partial_: true
    lr: 0.1
    weight_decay: 0.01
  scheduler:
    _target_: src.optim.CosineAnnealingLRWithWarmup
    _partial_: true
    T_max: ${eval:'${trainer.max_epochs} - ${model.scheduler.num_warmup}'}
    eta_min: 1.0e-06
    warmup_init_lr: 1.0e-06
    num_warmup: 20
    warmup_strategy: cos
  criterion:
    _target_: torch.nn.CrossEntropyLoss
    ignore_index: ${datamodule.num_classes}
  _point_mlp:
  - 32
  - 64
  - 128
  _node_mlp_out: 32
  _h_edge_mlp_out: 32
  _v_edge_mlp_out: 32
  _point_hf_dim: ${eval:'${model.net.use_pos} * 3 + ${datamodule.num_hf_point} + ${model.net.use_diameter_parent}'}
  _node_hf_dim: ${eval:'${model.net.use_node_hf} * ${datamodule.num_hf_segment}'}
  _node_injection_dim: ${eval:'${model.net.use_pos} * 3 + ${model.net.use_diameter}
    + ${model.net.use_diameter_parent} + (${model._node_mlp_out} if ${model._node_mlp_out}
    and ${model.net.use_node_hf} and ${model._node_hf_dim} > 0 else ${model._node_hf_dim})'}
  _h_edge_hf_dim: ${datamodule.num_hf_edge}
  _v_edge_hf_dim: ${datamodule.num_hf_v_edge}
  _down_dim:
  - 64
  - 64
  - 64
  - 64
  _up_dim:
  - 64
  - 64
  - 64
  _mlp_depth: 2
  net:
    point_mlp: ${eval:'[${model._point_hf_dim}] + ${model._point_mlp}'}
    point_drop: null
    down_dim: ${eval:'${model._down_dim}[:2]'}
    down_pool_dim: ${eval:'[${model._point_mlp}[-1]] + ${model._down_dim}[:-1]'}
    down_in_mlp: ${eval:'[ [${model._node_injection_dim} + ${model._point_mlp}[-1]
      * (not ${model.net.nano}) + ${datamodule.num_hf_segment} * (${model.net.nano}
      and not ${model.net.use_node_hf})] + [${model._down_dim}[0]] * ${model._mlp_depth},
      [${model._node_injection_dim} + ${model._down_dim}[0]] + [${model._down_dim}[1]]
      * ${model._mlp_depth} ]'}
    down_out_mlp: null
    down_mlp_drop: null
    down_num_heads: 16
    down_num_blocks: 3
    down_ffn_ratio: 1
    down_residual_drop: null
    down_attn_drop: null
    down_drop_path: null
    up_dim: ${eval:'${model._up_dim}[:1]'}
    up_in_mlp: ${eval:'[ [${model._node_injection_dim} + ${model._down_dim}[-1] +
      ${model._down_dim}[-2]] + [${model._up_dim}[0]] * ${model._mlp_depth} ]'}
    up_out_mlp: ${model.net.down_out_mlp}
    up_mlp_drop: ${model.net.down_mlp_drop}
    up_num_heads: ${model.net.down_num_heads}
    up_num_blocks: 1
    up_ffn_ratio: ${model.net.down_ffn_ratio}
    up_residual_drop: ${model.net.down_residual_drop}
    up_attn_drop: ${model.net.down_attn_drop}
    up_drop_path: ${model.net.down_drop_path}
    activation:
      _target_: torch.nn.LeakyReLU
    norm:
      _target_: src.nn.GraphNorm
      _partial_: true
    pre_norm: true
    no_sa: false
    no_ffn: true
    qk_dim: 4
    qkv_bias: true
    qk_scale: null
    in_rpe_dim: ${eval:'${model._h_edge_mlp_out} if ${model._h_edge_mlp_out} else
      ${model._h_edge_hf_dim}'}
    k_rpe: true
    q_rpe: true
    v_rpe: true
    k_delta_rpe: false
    q_delta_rpe: false
    qk_share_rpe: false
    q_on_minus_rpe: false
    stages_share_rpe: false
    blocks_share_rpe: false
    heads_share_rpe: false
    _target_: src.models.components.spt.SPT
    nano: false
    node_mlp: ${eval:'[${model._node_hf_dim}] + [${model._node_mlp_out}] * ${model._mlp_depth}
      if ${model._node_mlp_out} and ${model.net.use_node_hf} and ${model._node_hf_dim}
      > 0 else None'}
    h_edge_mlp: ${eval:'[${model._h_edge_hf_dim}] + [${model._h_edge_mlp_out}] * ${model._mlp_depth}
      if ${model._h_edge_mlp_out} else None'}
    v_edge_mlp: ${eval:'[${model._v_edge_hf_dim}] + [${model._v_edge_mlp_out}] * ${model._mlp_depth}
      if ${model._v_edge_mlp_out} else None'}
    share_hf_mlps: false
    mlp_activation:
      _target_: torch.nn.LeakyReLU
    mlp_norm:
      _target_: src.nn.GraphNorm
      _partial_: true
    use_pos: true
    use_node_hf: true
    use_diameter: false
    use_diameter_parent: true
    pool: max
    unpool: index
    fusion: cat
    norm_mode: graph
callbacks:
  model_checkpoint:
    _target_: pytorch_lightning.callbacks.ModelCheckpoint
    dirpath: ${paths.output_dir}/checkpoints
    filename: epoch_{epoch:03d}
    monitor: ${optimized_metric}
    verbose: false
    save_last: true
    save_top_k: 1
    mode: max
    auto_insert_metric_name: false
    save_weights_only: false
    every_n_train_steps: null
    train_time_interval: null
    every_n_epochs: null
    save_on_train_epoch_end: null
  early_stopping:
    _target_: pytorch_lightning.callbacks.EarlyStopping
    monitor: ${optimized_metric}
    min_delta: 0.0
    patience: 500
    verbose: false
    mode: max
    strict: true
    check_finite: true
    stopping_threshold: null
    divergence_threshold: null
    check_on_train_epoch_end: null
  model_summary:
    _target_: pytorch_lightning.callbacks.RichModelSummary
    max_depth: -1
  rich_progress_bar:
    _target_: pytorch_lightning.callbacks.RichProgressBar
  lr_monitor:
    _target_: pytorch_lightning.callbacks.LearningRateMonitor
    logging_interval: epoch
    log_momentum: true
  gradient_accumulator:
    _target_: pytorch_lightning.callbacks.GradientAccumulationScheduler
    scheduling:
      0: 1
logger:
  wandb:
    _target_: pytorch_lightning.loggers.wandb.WandbLogger
    save_dir: ${paths.output_dir}
    offline: false
    id: null
    anonymous: null
    project: spt_s3dis
    log_model: false
    prefix: ''
    group: ''
    tags: []
    job_type: ''
    name: SPT-64
trainer:
  _target_: pytorch_lightning.Trainer
  default_root_dir: ${paths.output_dir}
  min_epochs: 1
  max_epochs: 2000
  accelerator: gpu
  devices: 1
  check_val_every_n_epoch: 10
  deterministic: false
  precision: 32
paths:
  root_dir: ${oc.env:PROJECT_ROOT}
  data_dir: ${paths.root_dir}/data/
  log_dir: ${paths.root_dir}/logs/
  output_dir: ${hydra:runtime.output_dir}
  work_dir: ${hydra:runtime.cwd}
extras:
  ignore_warnings: false
  enforce_tags: true
  print_config: true
